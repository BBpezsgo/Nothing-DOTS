using "~/Projects/BBLang/Core/StandardLibrary/Primitives.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Math.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Vectors.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Console.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Memory.bbc";
using "api.bbc";

*Mapped = new MappedMemory;

const f32 PI = 3.14159265359f;
const f32 TAU = PI * 2f;
const f32 G = 9.82f;
const f32 PROJECTILE_V = 20f;
const f32 PROJECTILE_V2 = PROJECTILE_V * PROJECTILE_V;
const u8 true = (u8)1;
const u8 false = (u8)0;
const f32 DISTANCE_THRESHOLD = 50f;

const u8 REQUEST_HEADER = 0b_11110000;
const u8 RESPONSE_HEADER = 0b_01111000;

void Receive()
{
    u8[3] v;

    i32 receivedLength = receive(&v, 3, 0, 0);
    if (!receivedLength) { return; }

    if (v[0] == (u8)REQUEST_HEADER && receivedLength == 1)
    {
        v[0] = (u8)RESPONSE_HEADER;
        byte2 p;
        Vector2 pos = Mapped.Position;
        ToByte2(&pos, &p);
        v[1] = p.x as u8;
        v[2] = p.y as u8;
        send(&v, 3, 0f);
        // PrintLine("Send response ...");
    }
    else if (v[0] == (u8)RESPONSE_HEADER && receivedLength == 3)
    {
        Vector2 pos;
        byte2 p;
        p.x = v[1] as i8;
        p.y = v[2] as i8;
        ToFloat2(&p, &pos);
        ToLocal(&pos);
        Unit unit;
        ToByte2(&pos, &unit.Position);
        unit.Recorded = time();
        unit.Expires = time() + 10f;
        RemoveUnit(&enemies, unit.Position);

        ldebug(pos, 0x00FF00);

        // PrintLine("Object identified ...");
    }
}

u8 IsNotRecorded(List<Unit>* units, byte2 unit)
{
    u8 isNew = true;
    for (int i = 0; isNew && i < units.Length(); i++)
    {
        f32 distanceSqr = DistanceSqr(units.Raw()[i].Position, unit);
        if (distanceSqr < DISTANCE_THRESHOLD)
        {
            isNew = false;
        }
    }
    return isNew;
}

void RecordUnit(List<Unit>* units, Unit unit)
{
    u8 isNew = IsNotRecorded(units, unit.Position);
    if (isNew)
    {
        if (units.Length() >= 4)
        {
            units.Raw()[0] = unit;
        }
        else
        {
            units.Add(unit);
        }
    }
}

void RemoveUnit(List<Unit>* units, byte2 unit)
{
    u8 isNotDone = true;
    for (int i = 0; isNotDone && i < units.Length(); i++)
    {
        f32 distanceSqr = DistanceSqr(units.Raw()[i].Position, unit);
        if (distanceSqr < DISTANCE_THRESHOLD)
        {
            isNotDone = false;
            units.Remove(i);
        }
    }
}

void Radar()
{
    f32 radarDistance = radar(0);
    if (radarDistance > 0f &&
        Abs(prevRadarDistance - radarDistance) > .5f)
    {
        prevRadarDistance = radarDistance;

        Vector2 point;
        point.x = Sin(Mapped.RadarDirection);
        point.y = Cos(Mapped.RadarDirection);
        point.x *= radarDistance;
        point.y *= radarDistance;

        // PrintLine("Identifying object ...");

        u8[1] v;
        v[0] = (u8)REQUEST_HEADER;
        send(&v, 1, 0f);

        ldebug(point, 0x0000FF);

        Unit enemy;
        enemy.Recorded = time();
        enemy.Expires = time() + 5f;
        ToByte2(&point, &enemy.Position);
        RecordUnit(&enemies, enemy);
    }
    if (radarDistance == 0f)
    {
        prevRadarDistance = 0f;
    }
    Mapped.RadarDirection = (Mapped.RadarDirection + 0.01f) % TAU;
}

struct Unit
{
    byte2 Position;
    f32 Recorded;
    f32 Expires;
}

f32 prevRadarDistance = 0f;
Vector2 targetedPosition = new Vector2;
Vector2 currentTarget = new Vector2;
List<Unit> enemies = new List<Unit>(4);

while (1)
{
    Receive();

    Radar();

    // currentTarget = new Vector2;

    for (int i = (&enemies).Length() - 1; i >= 0; i--)
    {
        if (time() >= (&enemies).Raw()[i].Expires)
        {
            (&enemies).Remove(i);
        }
        else if (time() >= (&enemies).Raw()[i].Recorded + 1f)
        {
            Vector2 p1;
            byte2 p2 = (&enemies).Raw()[i].Position;
            ToFloat2(&p2, &p1);
            p1.y -= 0.2f;
            ldebug(p1, 0xFF0000);
            // currentTarget = p1;
        }
        else
        {
            Vector2 p1;
            byte2 p2 = (&enemies).Raw()[i].Position;
            ToFloat2(&p2, &p1);
        }
    }

    /*
    if (currentTarget.x != 0f ||
        currentTarget.y != 0f)
    {
        if (targetedPosition.x != currentTarget.x ||
            targetedPosition.y != currentTarget.y)
        {
            targetedPosition = currentTarget;

            ldebug(targetedPosition, 0xFF00FF);

            {
                Vector2 targetDirection = Normalised(new Vector2(currentTarget.x, currentTarget.y - 0.2));
                f32 targetAngle = Atan2(targetDirection.x, targetDirection.y);
                if (targetAngle < 0f) { targetAngle += TAU; }
                if (targetAngle >= TAU) { targetAngle -= TAU; }
                Mapped.TurretTargetRotation = targetAngle;
            }

            f32 targetDistance = Magnitude(currentTarget);
            targetDistance -= Cos(Mapped.TurretCurrentAngle) * 2.5f;
            f32 height = Sin(Mapped.TurretCurrentAngle) * 2.5f;
            f32 discriminant = (
                (PROJECTILE_V2 * PROJECTILE_V2) -
                (G * (G * targetDistance * targetDistance + ((4f + height) * -2f * PROJECTILE_V2)))
            )
            if (discriminant < 0f)
            {

            }
            else if (1)
            {
                Mapped.TurretTargetAngle = Atan(
                    (PROJECTILE_V2 + _Sqrt(discriminant)) /
                    (G * targetDistance)
                ) - (PI * 0.5f);
            }
            else
            {
                Mapped.TurretTargetAngle = Atan(
                    (PROJECTILE_V2 - _Sqrt(discriminant)) /
                    (G * targetDistance)
                ) - (PI * 0.5f);
            }
        }

        if (Abs(Mapped.TurretCurrentRotation - Mapped.TurretTargetRotation) < 0.1f)
        {
            Mapped.InputShoot = (u8)1;
        }
    }
    */
}
