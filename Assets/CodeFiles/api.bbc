using "~/Projects/BBLang/Core/StandardLibrary/System.Vectors.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Console.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Math.bbc";

export void Print(Vector2 v)
{
    Print(v.x);
    Print(' ');
    Print(v.y);
}

export inline void PrintLine(Vector2 v)
{
    Print(v);
    PrintLine();
}

export struct MappedMemory
{
    i8 InputForward;
    i8 InputSteer;
    u8 InputShoot;
    f32 TurretTargetRotation;
    f32 TurretTargetAngle;
    f32 TurretCurrentRotation;
    f32 TurretCurrentAngle;
    Vector2 Position;
    Vector2 Forward;
    f32 RadarDirection;
}

export const MappedMemory* Mapped = 640;

[External("atan2")] export f32 Atan2(f32 x, f32 y);
[External("sin")] export f32 Sin(f32 v);
[External("cos")] export f32 Cos(f32 v);
[External("tan")] export f32 Tan(f32 v);
[External("asin")] export f32 Asin(f32 v);
[External("acos")] export f32 Acos(f32 v);
[External("atan")] export f32 Atan(f32 v);
[External("sqrt")] export f32 _Sqrt(f32 v);
[External("send")] export void send(any* buffer, int length);
[External("receive")] export i32 receive(any* buffer, i32 length, Vector2* direction);
[External("radar")] export f32 radar(i32* metadata);
[External("debug")] export void debug(Vector2 position, i32 color);
[External("ldebug")] export void ldebug(Vector2 localPosition, i32 color);
[External("time")] export f32 time();

// export f32 Atan2(f32 x, f32 y) { }
// export f32 Sin(f32 v) { }
// export f32 Cos(f32 v) { }
// export f32 Tan(f32 v) { }
// export f32 Asin(f32 v) { }
// export f32 Acos(f32 v) { }
// export f32 Atan(f32 v) { }
// export f32 _Sqrt(f32 v) { }
// export void send(any* buffer, int length) { }
// export i32 receive(any* buffer, i32 length, Vector2* direction) { }

[External("toglobal")] export void ToGlobal(Vector2* point);
[External("tolocal")] export void ToLocal(Vector2* point);

export void sleep(f32 sec)
{
    f32 at = time() + sec;
    while (time() < at) { }
}
