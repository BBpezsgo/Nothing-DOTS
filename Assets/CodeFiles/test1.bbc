using "~/Projects/BBLang/Core/StandardLibrary/Primitives.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Math.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Vectors.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Console.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Lists.bbc";
using "api.bbc";

List<Vector2> allies = new List<Vector2>(4);

*Mapped = new MappedMemory;

const f32 PI = 3.14159265359f;
const f32 TAU = PI * 2f;
const f32 G = 9.82f;
const f32 PROJECTILE_V = 20f;
const f32 H = 0.1f;

f32 prevRadarDistance = 0f;
Vector2 currentTarget = new Vector2;

while (1)
{
    u8[4] v;
    v[0] = (u8)1;
    v[1] = (u8)2;
    v[2] = (u8)3;
    v[3] = (u8)4;
    send(&v, 4);

    {
        Vector2 receivedDirection;
        i32 receivedLength = receive(&v, 4, &receivedDirection);
        if (receivedLength == 4)
        {
            if ((v[0] == (u8)1) &&
                (v[1] == (u8)2) &&
                (v[2] == (u8)3) &&
                (v[3] == (u8)4))
            {
                u8 isNew = (u8)1;
                for (i32 i = 0; i < (&allies).Length(); i++)
                {
                    f32 allyDisplacement = Distance((&allies)[i], receivedDirection);
                    if (allyDisplacement < 1f)
                    {
                        isNew = (u8)0;
                        (&allies)[i] = receivedDirection;
                        break;
                    }
                }
                if (isNew)
                {
                    if ((&allies).Length() > 3)
                    { (&allies).Remove((&allies).Length() - 1); }

                    (&allies).Add(receivedDirection);

                    Print("New ally at ");
                    Print(receivedDirection.x);
                    Print(' ');
                    Print(receivedDirection.y);
                    PrintLine();
                }
            }

            // Print(v[0]);
            // Print(' ');
            // Print(v[1]);
            // Print(' ');
            // Print(v[2]);
            // Print(' ');
            // Print(v[3]);
            // PrintLine();
        }
    }

    {
        f32 radarDistance = radar(0);
        if (radarDistance > 0f && Abs(prevRadarDistance - radarDistance) > 1f)
        {
            prevRadarDistance = radarDistance;
            Vector2 radarDir;
            radarDir.x = Sin(Mapped.RadarDirection);
            radarDir.y = Cos(Mapped.RadarDirection);
            i32 isEnemy = (&allies).Length();
            i32 i = (&allies).Length();
            while (i)
            {
                i--;
                Vector2 allyDirection = Normalised((&allies)[i]);
                f32 dot = Dot(allyDirection, radarDir);
                if (dot > 0.2f)
                {
                    isEnemy--;
                }
            }
            currentTarget = new Vector2;
            if (isEnemy)
            {
                radarDir.x *= radarDistance;
                radarDir.y *= radarDistance;
                Print("Enemy at ");
                Print(radarDir.x);
                Print(' ');
                Print(radarDir.y);
                PrintLine();

                currentTarget = radarDir;
            }
        }
        if (radarDistance == 0f)
        {
            prevRadarDistance = 0f;
        }
        Mapped.RadarDirection = (Mapped.RadarDirection + 0.05f) % TAU;
    }

    if (currentTarget.x != 0f &&
        currentTarget.y != 0f)
    {
        {
            f32 targetAngle;
            {
                Vector2 targetDirection = Normalised(currentTarget);
                targetAngle = Atan2(targetDirection.x, targetDirection.y);
                if (targetAngle < 0f) { targetAngle += TAU; }
            }

            Mapped.TurretTargetRotation = targetAngle;
        }
        
        {
            f32 targetDistance = Magnitude(currentTarget);
            if (targetDistance > 20f)
            {
                Mapped.TurretTargetAngle = Atan(
                    (
                        (PROJECTILE_V * PROJECTILE_V) +
                        _Sqrt(
                            (PROJECTILE_V * PROJECTILE_V * PROJECTILE_V * PROJECTILE_V) -
                            (G * (G * targetDistance * targetDistance + (H * -1f) * (2f * PROJECTILE_V * PROJECTILE_V)))
                        )
                    ) / (
                        G * targetDistance
                    )
                );
            }
            else
            {
                Mapped.TurretTargetAngle = Atan(
                    (
                        (PROJECTILE_V * PROJECTILE_V) -
                        _Sqrt(
                            (PROJECTILE_V * PROJECTILE_V * PROJECTILE_V * PROJECTILE_V) -
                            (G * (G * targetDistance * targetDistance + (H * -1f) * (2f * PROJECTILE_V * PROJECTILE_V)))
                        )
                    ) / (
                        G * targetDistance
                    )
                );
            }
        }

        if (Abs(Mapped.TurretCurrentRotation - Mapped.TurretTargetRotation) < 0.1f)
        {
            Mapped.InputShoot = (u8)1;
        }
    }
}
