using "/home/BB/Projects/BBLang/Core/StandardLibrary/Primitives.bbc";
using "/home/BB/Projects/BBLang/Core/StandardLibrary/System.bbc";
using "/home/BB/Projects/BBLang/Core/StandardLibrary/System.Math.bbc";
using "/home/BB/Projects/BBLang/Core/StandardLibrary/System.Vectors.bbc";
using "/home/BB/Projects/BBLang/Core/StandardLibrary/System.Console.bbc";

[External("sleep")]
void Sleep(i32 miliseconds);

struct MappedMemory
{
    i8 InputForward;
    i8 InputSteer;
    u8 InputShoot;
    f32 TurretTargetRotation;
    f32 TurretTargetAngle;
    f32 TurretCurrentRotation;
    f32 TurretCurrentAngle;
    Vector2 Position;
    Vector2 Forward;
}

const MappedMemory* Mapped = 256;

void PrintLine(Vector2 v)
{
    Print('(');
    Print(v.x);
    Print(',');
    Print(v.y);
    Print(')');
    PrintLine();
}

const f32 PI = 3.14159265359f;

[External("atan2")]
f32 Atan2(f32 x, f32 y);

while (1)
{
    Vector2 forward = Mapped.Forward;
    Vector2 position = Mapped.Position;

    Vector2 dir;
    dir.x = 0f - position.x;
    dir.y = 0f - position.y;
    Normalise(&dir);

    f32 d = Distance(position, new Vector2(0f, 0f));

    f32 t = Atan2(dir.x, dir.y);
    f32 t2 = Atan2(forward.x, forward.y);
    f32 t3 = t - t2;

    Mapped.TurretTargetRotation = t3;
    Mapped.TurretTargetAngle = PI / 4f;

    if (Abs(Mapped.TurretTargetRotation - Mapped.TurretCurrentRotation) < 0.1f)
    {
        Mapped.InputShoot = (u8)1;
    }

    f32 s = Cross(forward, dir);
    f32 c = Dot(forward, dir);
    f32 t4 = Atan2(s, c);

    if (d < 1f)
    {
        Mapped.InputSteer = (i8)0;
        Mapped.InputForward = (i8)0;
    }
    elseif (t4 > 0.05f)
    {
        Mapped.InputSteer = (i8)-128;
    }
    elseif (t4 < -0.05f)
    {
        Mapped.InputSteer = (i8)127;
    }
    else
    {
        Mapped.InputSteer = (i8)0;
        d += 10f;
        if (d > 127f) { d = 127f; }
        Mapped.InputForward = (i8)(i32)d;
    }
}
