using "/home/BB/Projects/BBLang/Core/StandardLibrary/Primitives.bbc";
using "/home/BB/Projects/BBLang/Core/StandardLibrary/System.bbc";
using "/home/BB/Projects/BBLang/Core/StandardLibrary/System.Math.bbc";
using "/home/BB/Projects/BBLang/Core/StandardLibrary/System.Vectors.bbc";
using "/home/BB/Projects/BBLang/Core/StandardLibrary/System.Console.bbc";

[External("sleep")]
void Sleep(i32 miliseconds);

struct MappedMemory
{
    i8 InputForward;
    i8 InputSteer;
    u8 InputShoot;
    f32 TurretTargetRotation;
    f32 TurretTargetAngle;
    f32 TurretCurrentRotation;
    f32 TurretCurrentAngle;
    f32 PositionX;
    f32 PositionY;
    f32 ForwardX;
    f32 ForwardY;
}

const MappedMemory* Mapped = 257;

// Mapped.InputForward = 127 as u8;
// Mapped.InputSteer = 127 as u8;

void PrintLine(Vector2 v)
{
    Print('(');
    Print(v.x);
    Print(',');
    Print(v.y);
    Print(')');
    PrintLine();
}

const f32 PI = 3.14159265359f;

[External("atan2")]
f32 Atan2(f32 x, f32 y);

while (1)
{
    Vector2 dir;
    dir.x = 0f - Mapped.PositionX;
    dir.y = 0f - Mapped.PositionY;
    Normalise(&dir);
    f32 t = Atan2(dir.x, dir.y);
    f32 t2 = Atan2(Mapped.ForwardX, Mapped.ForwardY);

    Mapped.TurretTargetRotation = (t - t2);
    Mapped.TurretTargetAngle = PI / 4f;

    if (Abs(Mapped.TurretTargetRotation - Mapped.TurretCurrentRotation) < 0.1f)
    {
        *(258 as u8*) = (u8)1;
    }
}
