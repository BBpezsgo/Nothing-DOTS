using "~/Projects/BBLang/Core/StandardLibrary/Primitives.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Math.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Vectors.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Console.bbc";

struct MappedMemory
{
    i8 InputForward;
    i8 InputSteer;
    u8 InputShoot;
    f32 TurretTargetRotation;
    f32 TurretTargetAngle;
    f32 TurretCurrentRotation;
    f32 TurretCurrentAngle;
    Vector2 Position;
    Vector2 Forward;
}

const MappedMemory* Mapped = 256;

void PrintLine(Vector2 v)
{
    Print('(');
    Print(v.x);
    Print(',');
    Print(v.y);
    Print(')');
    PrintLine();
}

const f32 PI = 3.14159265359f;
const f32 TAU = PI * 2f;
const f32 G = 9.82f;
const f32 PROJECTILE_V = 20f;
const f32 H = 0.1f;

[External("atan2")] f32 Atan2(f32 x, f32 y);
[External("sin")] f32 Sin(f32 v);
[External("cos")] f32 Cos(f32 v);
[External("tan")] f32 Tan(f32 v);
[External("asin")] f32 Asin(f32 v);
[External("acos")] f32 Acos(f32 v);
[External("atan")] f32 Atan(f32 v);
[External("sqrt")] f32 _Sqrt(f32 v);

void Movement(f32 targetX, f32 targetY)
{
    Vector2 forward = Mapped.Forward;
    Vector2 position = Mapped.Position;

    Vector2 dirMove;
    dirMove.x = targetX - position.x;
    dirMove.y = targetY - position.y;
    Normalise(&dirMove);

    f32 d = Distance(position, new Vector2(targetX, targetY));

    f32 t1 = Cross(forward, dirMove);
    f32 t2 = Dot(forward, dirMove);
    f32 t4 = Atan2(t1, t2);

    if (d < 1f)
    {
        Mapped.InputSteer = (i8)0;
        Mapped.InputForward = (i8)0;
    }
    elseif (t4 > 0.1f)
    {
        Mapped.InputSteer = (i8)-128;
    }
    elseif (t4 < -0.1f)
    {
        Mapped.InputSteer = (i8)127;
    }
    elseif (t4 > 0.05f)
    {
        Mapped.InputSteer = (i8)-64;
    }
    elseif (t4 < -0.05f)
    {
        Mapped.InputSteer = (i8)64;
    }
    else
    {
        Mapped.InputSteer = (i8)0;
        d += 10f;
        if (d > 127f) { d = 127f; }
        Mapped.InputForward = (i8)(i32)d;
    }
}

void Shooting(f32 targetX, f32 targetY)
{
    Vector2 forward = Mapped.Forward;
    Vector2 position = Mapped.Position;

    Vector2 dir;
    dir.x = targetX - position.x;
    dir.y = targetY - position.y;
    Normalise(&dir);

    f32 d = Distance(position, new Vector2(targetX, targetY));

    f32 t = Atan2(dir.x, dir.y);
    f32 t2 = Atan2(forward.x, forward.y);
    f32 t3 = t - t2;

    if (t3 < 0f) { t3 += TAU; }

    Mapped.TurretTargetRotation = t3;
    if (d > 20f)
    {
        Mapped.TurretTargetAngle = Atan(
            (
                (PROJECTILE_V * PROJECTILE_V) +
                _Sqrt(
                    (PROJECTILE_V * PROJECTILE_V * PROJECTILE_V * PROJECTILE_V) -
                    (G * (G * d * d + (H * -1f) * (2f * PROJECTILE_V * PROJECTILE_V)))
                )
            ) / (
                G * d
            )
        );
    }
    else
    {
        Mapped.TurretTargetAngle = Atan(
            (
                (PROJECTILE_V * PROJECTILE_V) -
                _Sqrt(
                    (PROJECTILE_V * PROJECTILE_V * PROJECTILE_V * PROJECTILE_V) -
                    (G * (G * d * d + (H * -1f) * (2f * PROJECTILE_V * PROJECTILE_V)))
                )
            ) / (
                G * d
            )
        );
    }


    if (Abs(Mapped.TurretCurrentRotation - Mapped.TurretTargetRotation) < 0.1f)
    {
        Mapped.InputShoot = (u8)1;
    }
}

while (1)
{
    Movement(10f, 10f);
    Shooting(0f, 0f);
}
