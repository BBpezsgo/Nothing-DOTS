using "~/Projects/BBLang/Core/StandardLibrary/Primitives.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Math.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Vectors.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Console.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Memory.bbc";
using "turret.bbc";
using "api.bbc";

*Mapped = new MappedMemory;

const f32 PI = 3.14159265359f;
const f32 TAU = PI * 2f;
const u8 true = (u8)1;
const u8 false = (u8)0;
const f32 DISTANCE_THRESHOLD = 50f;

f32 requestSentAt = 0f;
f32 requestSentToDistance = 0f;
f32 requestSentToDirection = 0f;

void SendResponse(f32 direction)
{
    u8[2] v;
    v[0] = (u8)3;
    v[1] = (u8)4;
    send(&v, 2, direction, 0.3f);

    // Vector2 point;
    // point.x = Sin(direction) * 10f;
    // point.y = Cos(direction) * 10f;
    // ldebug(point, 0x00FFFF);
}

void SendRequest(f32 direction)
{
    u8[2] v;
    v[0] = (u8)1;
    v[1] = (u8)2;
    send(&v, 2, direction, 0.7f);

    Vector2 point;
    point.x = Sin(direction) * 10f;
    point.y = Cos(direction) * 10f;
    ldebug(point, 0x0000FF);
}

void Receive()
{
    u8[2] v;
    f32 receivedDirection;

    while (1)
    {
        i32 receivedLength = receive(&v, 2, &receivedDirection, 0 as u8*);
        if (receivedLength != 2) { break; }

        // {
        //     Vector2 point;
        //     point.x = Sin(receivedDirection) * 10f;
        //     point.y = Cos(receivedDirection) * 10f;
        //     ldebug(point, 0xFF00FF);
        // }

        if (v[0] == (u8)1 &&
            v[1] == (u8)2)
        {
            // PrintLine("Sending response ...");
            SendResponse(receivedDirection);
        }
        else if (v[0] == (u8)3 &&
                 v[1] == (u8)4)
        {
            if (requestSentAt as i32)
            {
                f32 diff = Min(
                    Abs(receivedDirection - requestSentToDirection),
                    TAU - Abs(receivedDirection - requestSentToDirection)
                );

                if (diff < 0.6f)
                {
                    Unit unit;
                    unit.Expires = time() + 5f;
                    Vector2 point;
                    point.x = Sin(receivedDirection) * requestSentToDistance;
                    point.y = Cos(receivedDirection) * requestSentToDistance;
                    ToByte2(&point, &unit.Position);
                    ldebug(point, 0x00FF00);

                    requestSentAt = 0f;
                    requestSentToDistance = 0f;
                    requestSentToDirection = 0f;

                    // PrintLine("Object identified");
                }
                else
                {
                    Vector2 point;
                    point.x = Sin(receivedDirection) * 10f;
                    point.y = Cos(receivedDirection) * 10f;
                    ldebug(point, 0xFFFF00);
                    // PrintLine(diff);
                }
            }
        }
    }
}

void RecordUnit(List<Unit>* units, Unit unit)
{
    u8 isNew = true;
    for (int i = 0; isNew && i < units.Length(); i++)
    {
        f32 distanceSqr = DistanceSqr(units.Raw()[i].Position, unit.Position);
        if (distanceSqr < DISTANCE_THRESHOLD)
        {
            units.Raw()[i] = unit;
            isNew = false;
        }
    }
    if (isNew)
    {
        if (units.Length() >= 4)
        {
            units.Raw()[0] = unit;
        }
        else
        {
            units.Add(unit);
        }
    }
}

i32 IsEnemy(Vector2 point)
{
    i32 isEnemy = (&allies).Length();
    int i = (&allies).Length();
    while (i)
    {
        i--;
        byte2 allyPosition_ = (&allies).Raw()[i].Position;
        Vector2 allyPosition;
        ToFloat2(&allyPosition_, &allyPosition);
        f32 d = DistanceSqr(point, allyPosition);
        if (d < DISTANCE_THRESHOLD)
        {
            isEnemy--;
        }
    }
    return isEnemy;
}

void Radar()
{
    f32 radarDistance = radar();
    if (radarDistance > 0f &&
        Abs(prevRadarDistance - radarDistance) > 1f)
    {
        if (requestSentAt as i32) return;

        prevRadarDistance = radarDistance;

        // Vector2 point;
        // point.x = Sin(Mapped.RadarDirection);
        // point.y = Cos(Mapped.RadarDirection);
        // point.x *= radarDistance;
        // point.y *= radarDistance;
        // ldebug(point, 0xFFFFFF);

        // PrintLine("Identifying object ...");

        SendRequest(Mapped.RadarDirection);
        requestSentAt = time();
        requestSentToDistance = radarDistance;
        requestSentToDirection = Mapped.RadarDirection;
    }
    if (radarDistance == 0f)
    {
        prevRadarDistance = 0f;
    }
    Mapped.RadarDirection = (Mapped.RadarDirection + 0.05f) % TAU;
}

struct Unit
{
    byte2 Position;
    f32 Expires;
}

f32 prevRadarDistance = 0f;
Vector2 targetedPosition = new Vector2;
Vector2 currentTarget = new Vector2;
List<Unit> enemies = new List<Unit>(2);

while (1)
{
    Receive();

    if (requestSentAt as i32)
    {
        if ((time() - requestSentAt) > 5f)
        {
            // PrintLine("Object didn't respond");

            Vector2 point;
            point.x = Sin(requestSentToDirection);
            point.y = Cos(requestSentToDirection);
            point.x *= requestSentToDistance;
            point.y *= requestSentToDistance;

            requestSentAt = 0f;
            requestSentToDistance = 0f;
            requestSentToDirection = 0f;

            ldebug(point, 0xFF0000);

            Unit enemy;
            enemy.Expires = time() + 5f;
            ToByte2(&point, &enemy.Position);
            RecordUnit(&enemies, enemy);
        }
    }

    Radar();

    currentTarget = new Vector2;

    for (int i = (&enemies).Length() - 1; i >= 0; i--)
    {
        if (time() >= (&enemies).Raw()[i].Expires)
        {
            (&enemies).Remove(i);
        }
        else
        {
            Vector2 p1;
            byte2 p2 = (&enemies).Raw()[i].Position;
            ToFloat2(&p2, &p1);
            ldebug(p1, 0xFF0000);
            currentTarget = p1;
        }
    }

    ShootAt(currentTarget, &targetedPosition);
}
