using "~/Projects/BBLang/Core/StandardLibrary/Primitives.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Math.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Vectors.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Console.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Memory.bbc";
using "api.bbc";

*Mapped = new MappedMemory;

const f32 PI = 3.14159265359f;
const f32 TAU = PI * 2f;
const f32 G = 9.82f;
const f32 PROJECTILE_V = 20f;
const f32 PROJECTILE_V2 = PROJECTILE_V * PROJECTILE_V;
const u8 true = (u8)1;
const u8 false = (u8)0;

void SendPing()
{
    u8[4] v;
    v[0] = (u8)1;
    v[1] = (u8)2;
    v[2] = (u8)3;
    v[3] = (u8)4;
    send(&v, 4);
}

void ReceivePing()
{
    u8[4] v;
    v[0] = (u8)5;
    v[1] = (u8)6;
    v[2] = (u8)7;
    v[3] = (u8)8;

    Vector2 receivedDirection;
    i32 receivedLength = receive(&v, 4, &receivedDirection);
    if (receivedLength != 4) { return; }

    // ldebug(receivedDirection, 0x0022FF);

    Unit unit;
    unit.Expires = time() + 5f;
    ToByte2(&receivedDirection, &unit.Position);
    RecordUnit(&allies, unit);
}

void RecordUnit(List<Unit>* units, Unit unit)
{
    u8 isNew = true;
    for (int i = 0; isNew && i < units.Length(); i++)
    {
        f32 distanceSqr = DistanceSqr(units.Raw()[i].Position, unit.Position);
        if (distanceSqr < 1000f)
        {
            // PrintLine("Update unit ...");
            units.Raw()[i] = unit;
            isNew = false;
        }
    }
    if (isNew)
    {
        if (units.Length() >= 4)
        {
            // PrintLine("Replace new unit ...");
            units.Raw()[0] = unit;
        }
        else
        {
            // PrintLine("Record new unit ...");
            units.Add(unit);
        }
    }
}

struct Unit
{
    byte2 Position;
    f32 Expires;
}

f32 prevRadarDistance = 0f;
Vector2 targetedPosition = new Vector2;
Vector2 currentTarget = new Vector2;
List<Unit> allies = new List<Unit>(4);
List<Unit> enemies = new List<Unit>(2);

while (1)
{
    PrintLine(time());

    SendPing();
    ReceivePing();

    {
        f32 radarDistance = radar(0);
        if (radarDistance > 0f && Abs(prevRadarDistance - radarDistance) > .1f)
        {
            prevRadarDistance = radarDistance;
            f32 radarAngle = Mapped.RadarDirection;
            Vector2 radarDir;
            radarDir.x = Sin(radarAngle);
            radarDir.y = Cos(radarAngle);
            radarDir.x *= radarDistance;
            radarDir.y *= radarDistance;

            i32 isEnemy = (&allies).Length();
            int i = (&allies).Length();
            while (i)
            {
                i--;
                byte2 allyPosition_ = (&allies).Raw()[i].Position;
                Vector2 allyPosition;
                ToFloat2(&allyPosition_, &allyPosition);
                f32 d = DistanceSqr(radarDir, allyPosition);
                if (d < 10f)
                {
                    isEnemy--;
                }
            }

            if (isEnemy)
            {
                ldebug(radarDir, 0xFF0000);
                Unit enemy;
                enemy.Expires = time() + 5f;
                ToByte2(&radarDir, &enemy.Position);
                RecordUnit(&enemies, enemy);
            }
            else
            {
                ldebug(radarDir, 0xFFFFFF);
            }
        }
        if (radarDistance == 0f)
        {
            prevRadarDistance = 0f;
        }
        Mapped.RadarDirection = (Mapped.RadarDirection + 0.05f) % TAU;
    }

    for (int i = (&allies).Length() - 1; i >= 0; i--)
    {
        if (time() >= (&allies).Raw()[i].Expires)
        {
            (&allies).Remove(i);
        }
        else
        {
            Vector2 p1;
            byte2 p2 = (&allies).Raw()[i].Position;
            ToFloat2(&p2, &p1);
            ldebug(p1, 0x00FF00);
        }
    }

    currentTarget = new Vector2;

    for (int i = (&enemies).Length() - 1; i >= 0; i--)
    {
        if (time() >= (&enemies).Raw()[i].Expires)
        {
            (&enemies).Remove(i);
        }
        else
        {
            Vector2 p1;
            byte2 p2 = (&enemies).Raw()[i].Position;
            ToFloat2(&p2, &p1);
            p1.y -= 0.2f;
            ldebug(p1, 0xFF0000);
            currentTarget = p1;
        }
    }

    if (currentTarget.x != 0f ||
        currentTarget.y != 0f)
    {
        if (targetedPosition.x != currentTarget.x ||
            targetedPosition.y != currentTarget.y)
        {
            targetedPosition = currentTarget;

            ldebug(targetedPosition, 0xFF00FF);

            {
                Vector2 targetDirection = Normalised(new Vector2(currentTarget.x, currentTarget.y - 0.2));
                f32 targetAngle = Atan2(targetDirection.x, targetDirection.y);
                if (targetAngle < 0f) { targetAngle += TAU; }
                if (targetAngle >= TAU) { targetAngle -= TAU; }
                Mapped.TurretTargetRotation = targetAngle;
            }

            f32 targetDistance = Magnitude(currentTarget);
            targetDistance -= Cos(Mapped.TurretCurrentAngle) * 2.5f;
            f32 height = Sin(Mapped.TurretCurrentAngle) * 2.5f;
            f32 discriminant = (
                (PROJECTILE_V2 * PROJECTILE_V2) -
                (G * (G * targetDistance * targetDistance + ((4f + height) * -2f * PROJECTILE_V2)))
            )
            if (discriminant < 0f)
            {

            }
            else if (1)
            {
                Mapped.TurretTargetAngle = Atan(
                    (PROJECTILE_V2 + _Sqrt(discriminant)) /
                    (G * targetDistance)
                ) - (PI * 0.5f);
            }
            else
            {
                Mapped.TurretTargetAngle = Atan(
                    (PROJECTILE_V2 - _Sqrt(discriminant)) /
                    (G * targetDistance)
                ) - (PI * 0.5f);
            }
        }

        if (Abs(Mapped.TurretCurrentRotation - Mapped.TurretTargetRotation) < 0.1f)
        {
            Mapped.InputShoot = (u8)1;
        }
    }
}
