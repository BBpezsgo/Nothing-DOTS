using "turret.bbc";
using "move.bbc";
using "api.bbc";

[UnitCommand(1, "Attack at")]
struct CommandAttackAt
{
    [Context("position")] float2 position;
}

[UnitCommand(2, "Move to")]
struct CommandMoveTo
{
    [Context("position")] float2 position;
}

const int MaxCommandDataSize = 8;

const f32 DISTANCE_THRESHOLD = 50f;

const u8 REQUEST_HEADER = 0b_11110000;
const u8 RESPONSE_HEADER = 0b_01111000;

void Receive()
{
    u8[3] v;

    while (1)
    {
        i32 receivedLength = receive(&v, 3, 0 as f32*);
        if (!receivedLength) { break; }

        if (v[0] == (u8)REQUEST_HEADER && receivedLength == 3)
        {
            byte2 p;
            float2 pos;
            p.x = v[1] as i8;
            p.y = v[2] as i8;
            ToFloat2(&p, &pos);

            if (DistanceSqr(pos, GPS.Position) < 2f * 2f)
            {
                pos = GPS.Position;
                ToByte2(&pos, &p);

                v[0] = (u8)RESPONSE_HEADER;
                v[1] = p.x as u8;
                v[2] = p.y as u8;
                send(&v, 3, 0f, 0f);
                PrintLine("Send response ...");
            }
        }
        else if (v[0] == (u8)RESPONSE_HEADER && receivedLength == 3)
        {
            float2 pos;
            byte2 p;
            p.x = v[1] as i8;
            p.y = v[2] as i8;
            ToFloat2(&p, &pos);
            ToLocal(&pos);
            Unit unit;
            ToByte2(&pos, &unit.Position);
            unit.Recorded = time();
            unit.Expires = time() + 10f;
            RemoveUnit(&enemies, unit.Position);

            ldebug(pos, GREEN);

            PrintLine("Object identified ...");
        }
    }
}

u8 IsNotRecorded(List<Unit>* units, byte2 unit)
{
    u8 isNew = true;
    for (int i = 0; isNew && i < units.Length(); i++)
    {
        f32 distanceSqr = DistanceSqr(units.Raw()[i].Position, unit);
        if (distanceSqr < DISTANCE_THRESHOLD)
        {
            isNew = false;
        }
    }
    return isNew;
}

void RecordUnit(List<Unit>* units, Unit unit)
{
    u8 isNew = IsNotRecorded(units, unit.Position);
    if (isNew)
    {
        if (units.Length() >= 4)
        {
            units.Raw()[0] = unit;
        }
        else
        {
            units.Add(unit);
        }
    }
}

void RemoveUnit(List<Unit>* units, byte2 unit)
{
    u8 isNotDone = true;
    for (int i = 0; isNotDone && i < units.Length(); i++)
    {
        f32 distanceSqr = DistanceSqr(units.Raw()[i].Position, unit);
        if (distanceSqr < DISTANCE_THRESHOLD)
        {
            isNotDone = false;
            units.Remove(i);
        }
    }
}

void PerformRadar()
{
    PrintLine("Radar ...");
    f32 radarDistance = radar();
    if (radarDistance > 0f &&
        Abs(prevRadarDistance - radarDistance) > .5f)
    {
        prevRadarDistance = radarDistance;

        float2 point;
        point.x = Sin(Radar.RadarDirection);
        point.y = Cos(Radar.RadarDirection);
        point.x *= radarDistance;
        point.y *= radarDistance;

        PrintLine("Identifying object ...");

        float2 pointGlobal = point;
        ToGlobal(&pointGlobal);
        byte2 p;
        ToByte2(&pointGlobal, &p);

        u8[3] v;
        v[0] = (u8)REQUEST_HEADER;
        v[1] = p.x as u8;
        v[2] = p.y as u8;
        send(&v, 3, 0f, 0f);

        ldebug(point, BLUE);

        Unit enemy;
        enemy.Recorded = time();
        enemy.Expires = time() + 5f;
        ToByte2(&point, &enemy.Position);
        RecordUnit(&enemies, enemy);
    }
    if (radarDistance == 0f)
    {
        prevRadarDistance = 0f;
    }
    Radar.RadarDirection = (Radar.RadarDirection + 0.05f) % TAU;
}

struct Unit
{
    byte2 Position;
    f32 Recorded;
    f32 Expires;
}

f32 prevRadarDistance = 0f;
float2 targetedPosition = new float2;
float2 currentTarget = new float2;
float2 currentDestination = new float2;
List<Unit> enemies = new List<Unit>(4);

while (1)
{
    Receive();

    PerformRadar();

    currentTarget = new float2;

    for (int i = (&enemies).Length() - 1; i >= 0; i--)
    {
        if (time() >= (&enemies).Raw()[i].Expires)
        {
            (&enemies).Remove(i);
        }
        else if (time() >= (&enemies).Raw()[i].Recorded + 2f)
        {
            float2 p1;
            byte2 p2 = (&enemies).Raw()[i].Position;
            ToFloat2(&p2, &p1);
            ldebug(p1, RED);
            currentTarget = p1;
        }
        else
        {
            float2 p1;
            byte2 p2 = (&enemies).Raw()[i].Position;
            ToFloat2(&p2, &p1);
        }
    }

    byte[MaxCommandDataSize] _command;

    int commandId = dequeue_command(&_command);

    if (commandId == 1)
    {
        CommandAttackAt* command = &_command as CommandAttackAt*;
        currentTarget = command.position;
        currentDestination = new float2;
        ToLocal(&currentTarget);
    }
    else if (commandId == 2)
    {
        CommandMoveTo* command = &_command as CommandMoveTo*;
        currentTarget = new float2;
        currentDestination = command.position;
    }

    if (currentTarget.x != 0f &&
        currentTarget.x != 0f)
    {
        ShootAt(currentTarget, &targetedPosition);
    }

    if (currentDestination.x != 0f &&
        currentDestination.x != 0f)
    {
        MoveTo(currentDestination.x, currentDestination.y);
    }
}
