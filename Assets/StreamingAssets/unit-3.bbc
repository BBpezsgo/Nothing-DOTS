using "~/Projects/BBLang/Core/StandardLibrary/Primitives.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Math.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Vectors.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Console.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Memory.bbc";
using "turret.bbc";
using "api.bbc";

const f32 PI = 3.14159265359f;
const f32 TAU = PI * 2f;
const u8 true = (u8)1;
const u8 false = (u8)0;

void PerformRadar()
{
    f32 radarDistance = radar();
    if (radarDistance > 0f)
    {
        PrintLine(radarDistance);
        currentTarget.x = Sin(Radar.RadarDirection) * radarDistance;
        currentTarget.y = Cos(Radar.RadarDirection) * radarDistance;
    }
    else
    {
        Radar.RadarDirection = (Radar.RadarDirection + 0.05f) % TAU;
    }
}

float2 targetedPosition = new float2;
float2 currentTarget = new float2;

while (1)
{
    PerformRadar();

    ldebug(currentTarget, RED);

    ShootAt(currentTarget, &targetedPosition);
}
