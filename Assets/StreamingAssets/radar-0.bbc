using "lib/api.bbc";
using "lib/protocol.bbc";

void Receive()
{
    u8[MaxPacketLength] v;
    float3 direction;

    while (1)
    {
        i32 receivedLength = receive(&v, MaxPacketLength, &direction);
        if (!receivedLength) { break; }

        if (v[0] == (u8)REQUEST_HEADER &&
            receivedLength == sizeof(VerificationRequestPacket))
        {
            VerificationRequestPacket* packet = &v as VerificationRequestPacket*;

            Print("I-REQ ");
            Print(packet.Position);
            PrintLine();

            VerificationResponsePacket responsePacket = new VerificationResponsePacket;
            responsePacket.Header = (u8)RESPONSE_HEADER;

            if (DistanceSqr(packet.Position, GPS.Position) < DistanceThresholdSq)
            {
                Print(" M");
                responsePacket.Position = GPS.Position;
                debug(packet.Position, CYAN);
                send(&responsePacket as u8[]*, sizeof(VerificationResponsePacket), &direction);
            }
            else
            {
                for (int i = 0; i < (&allies).Length(); i++)
                {
                    f32 distanceSqr = DistanceSqr((&allies).Raw()[i].Position, packet.Position);
                    if (distanceSqr < DistanceThresholdSq)
                    {
                        Print(" K");
                        IndirectVerificationResponsePacket indirectResponsePacket = new IndirectVerificationResponsePacket;
                        indirectResponsePacket.Header = (u8)INDIRECT_RESPONSE_HEADER;
                        indirectResponsePacket.Position = (&allies).Raw()[i].Position;
                        indirectResponsePacket.Expires = (&allies).Raw()[i].Expires;
                        send(&indirectResponsePacket as u8[]*, sizeof(IndirectVerificationResponsePacket), &direction);
                        return;
                    }
                }
            }
        }
        else if (v[0] == (u8)RESPONSE_HEADER &&
                 receivedLength == sizeof(VerificationResponsePacket))
        {
            VerificationResponsePacket* packet = &v as VerificationResponsePacket*;

            Print("I-RES ");
            Print(packet.Position);
            PrintLine();

            Unit unit;
            unit.Position = packet.Position;
            unit.Recorded = time();
            unit.Expires = time() + 10f;
            unit.VerificationSentAt = time();
            unit.PositionRecords = 1;
            RemoveUnitAt(&enemies, unit.Position);
            int j = SetUnit(&allies, unit);

            for (int i = 0; i < (&allies).Length(); i++)
            {
                if (i != j)
                {
                    direction = (&allies).Raw()[i].Position;
                    ToLocal(&direction);
                    Normalise(&direction);

                    PrintLine("NTFY");

                    IndirectVerificationResponsePacket indirectResponsePacket = new IndirectVerificationResponsePacket;
                    indirectResponsePacket.Header = INDIRECT_RESPONSE_HEADER;
                    indirectResponsePacket.Position = packet.Position;
                    indirectResponsePacket.Expires = unit.Expires;
                    send(&indirectResponsePacket as u8[]*, sizeof(IndirectVerificationResponsePacket), &direction);
                }
            }
        }
        else if (v[0] == (u8)ENEMY_HEADER &&
                 receivedLength == sizeof(EnemyNotificationPacket))
        {
            EnemyNotificationPacket* packet = &v as EnemyNotificationPacket*;

            Print("I-E ");
            Print(packet.Position);
            PrintLine();

            Unit unit;
            unit.Position = packet.Position;
            unit.Recorded = 0f;
            unit.Expires = time() + 5f;
            unit.VerificationSentAt = time();
            unit.PositionRecords = 1;
            SetUnit(&enemies, unit);
        }
        else if (v[0] == (u8)INDIRECT_RESPONSE_HEADER &&
                 receivedLength == sizeof(IndirectVerificationResponsePacket))
        {
            IndirectVerificationResponsePacket* packet = &v as IndirectVerificationResponsePacket*;

            Print("I-RES ");
            Print(packet.Position);
            PrintLine();

            Unit unit;
            unit.Position = packet.Position;
            unit.Recorded = time();
            unit.Expires = packet.Expires;
            unit.VerificationSentAt = time();
            unit.PositionRecords = 1;
            RemoveUnitAt(&enemies, unit.Position);
            SetUnit(&allies, unit);
        }
    }
}

void PerformRadar()
{
    float3 radarPoint = radar();
    if (!empty(radarPoint))
    {
        prevRadarDistance = length(radarPoint);

        ToGlobal(&radarPoint);

        if (UnitIndexAt(&allies, radarPoint) != -1)
        {
            Print('.');
            Print(radarPoint);
            PrintLine();
        }
        else
        {
            Print('!');
            Print(radarPoint);
            PrintLine();

            Unit enemy;
            enemy.Recorded = time();
            enemy.Expires = time() + 12f;
            enemy.Position = radarPoint;
            enemy.PositionRecords = 1;
            SendVerificationRequest(&enemy);
            UpdateUnit(&enemies, enemy);
        }
    }
    else
    {
        prevRadarDistance = 0f;
    }
    Radar.RadarDirection = (Radar.RadarDirection + 0.05f) % TAU;
}

f32 prevRadarDistance = 0f;
List<Unit> enemies = new List<Unit>(4);
List<Unit> allies = new List<Unit>(4);
int i = 0;
int j = 0;

PrintLine("Started ...");

while (1)
{
    Receive();

    PerformRadar();

    if ((&enemies).Length())
    {
        i = (i + 1) % (&enemies).Length();
        if (time() >= (&enemies).Raw()[i].Expires)
        {
            (&enemies).SwapBack(i);
        }
        else
        {
            float3 p = (&enemies).Raw()[i].Position;
            if (time() >= (&enemies).Raw()[i].Recorded + 4f)
            {
                if (time() >= (&enemies).Raw()[i].NotifiedAt + 5f)
                {
                    EnemyNotificationPacket notificationPacket;
                    notificationPacket.Header = ENEMY_HEADER;
                    notificationPacket.Position = p;
                    send(&notificationPacket as u8[]*, sizeof(EnemyNotificationPacket));
                    (&enemies).Raw()[i].NotifiedAt = time();
                }
                debug(p, RED);
            }
            elseif (time() >= (&enemies).Raw()[i].Recorded + 1f)
            {
                debug(p, YELLOW);
            }
            PrintLine("CHK");
            TrySendVerificationRequest(&(&enemies).Raw()[i]);
        }
    }

    if ((&allies).Length())
    {
        j = (j + 1) % (&allies).Length();
        if (time() >= (&allies).Raw()[j].Expires)
        {
            PrintLine("RTH");
            TrySendVerificationRequest(&(&allies).Raw()[j]);
            (&allies).SwapBack(j);
        }
        else
        {
            debug((&allies).Raw()[j].Position, GREEN);
        }
    }
}
