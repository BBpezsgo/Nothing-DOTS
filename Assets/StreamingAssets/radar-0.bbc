using "api.bbc";
using "protocol.bbc";

void Receive()
{
    u8[MaxPacketLength] v;
    f32 direction;

    while (1)
    {
        i32 receivedLength = receive(&v, MaxPacketLength, &direction);
        if (!receivedLength) { break; }

        if (v[0] == (u8)REQUEST_HEADER &&
            receivedLength == sizeof(VerificationRequestPacket))
        {
            VerificationRequestPacket* packet = &v as VerificationRequestPacket*;

            VerificationResponsePacket responsePacket = new VerificationResponsePacket;
            responsePacket.Header = (u8)RESPONSE_HEADER;

            if (DistanceSqr(packet.Position, GPS.Position) < DistanceThresholdSq)
            {
                responsePacket.Position = GPS.Position;
                debug(packet.Position, CYAN);
                send(&responsePacket as u8[]*, sizeof(VerificationResponsePacket), direction, 0.1f);
            }
            else
            {
                for (int i = 0; i < (&allies).Length(); i++)
                {
                    f32 distanceSqr = DistanceSqr((&allies).Raw()[i].Position, packet.Position);
                    if (distanceSqr < DistanceThresholdSq)
                    {
                        IndirectVerificationResponsePacket indirectResponsePacket = new IndirectVerificationResponsePacket;
                        indirectResponsePacket.Header = (u8)INDIRECT_RESPONSE_HEADER;
                        indirectResponsePacket.Position = (&allies).Raw()[i].Position;
                        indirectResponsePacket.Expires = (&allies).Raw()[i].Expires;
                        send(&indirectResponsePacket as u8[]*, sizeof(IndirectVerificationResponsePacket), direction, 0.1f);
                        return;
                    }
                }
            }
        }
        else if (v[0] == (u8)RESPONSE_HEADER &&
                 receivedLength == sizeof(VerificationResponsePacket))
        {
            VerificationResponsePacket* packet = &v as VerificationResponsePacket*;

            Unit unit;
            unit.Position = packet.Position;
            unit.Recorded = time();
            unit.Expires = time() + 10f;
            unit.VerificationSentAt = time();
            unit.PositionRecords = 1;
            RemoveUnitAt(&enemies, unit.Position);
            UpdateUnit(&allies, unit);
        }
        else if (v[0] == (u8)ENEMY_HEADER &&
                 receivedLength == sizeof(EnemyNotificationPacket))
        {
            EnemyNotificationPacket* packet = &v as EnemyNotificationPacket*;

            Unit unit;
            unit.Position = packet.Position;
            unit.Recorded = 0f;
            unit.Expires = time() + 5f;
            unit.VerificationSentAt = time();
            unit.PositionRecords = 1;
            UpdateUnit(&enemies, unit);
        }
        else if (v[0] == (u8)INDIRECT_RESPONSE_HEADER &&
                 receivedLength == sizeof(IndirectVerificationResponsePacket))
        {
            IndirectVerificationResponsePacket* packet = &v as IndirectVerificationResponsePacket*;

            Unit unit;
            unit.Position = packet.Position;
            unit.Recorded = time();
            unit.Expires = packet.Expires;
            unit.VerificationSentAt = time();
            unit.PositionRecords = 1;
            RemoveUnitAt(&enemies, unit.Position);
            UpdateUnit(&allies, unit);
        }
    }
}

int UnitIndexAt(List<Unit>* units, float2 position)
{
    for (int i = 0; i < units.Length(); i++)
    {
        if (DistanceSqr(units.Raw()[i].Position, position) < DistanceThresholdSq)
        { return i; }
    }
    return -1;
}

int UnitIndexAt(List<Unit>* units, float2 position, float* distanceSqr)
{
    for (int i = 0; i < units.Length(); i++)
    {
        *distanceSqr = DistanceSqr(units.Raw()[i].Position, position);
        if ((*distanceSqr) < DistanceThresholdSq)
        { return i; }
    }
    return -1;
}

void UpdateUnit(List<Unit>* units, Unit unit)
{
    float distanceSqr = 0f;
    int existing = UnitIndexAt(units, unit.Position, &distanceSqr);
    if (existing == -1)
    {
        if (units.Length() >= 4)
        {
            PrintLine("Too many units");
            units.Raw()[0] = unit;
        }
        else
        {
            units.Add(unit);
        }
    }
    elseif (distanceSqr < 2f * 2f)
    {
        if (units.Raw()[existing].PositionRecords > 20)
        {
            unit.Position.x = unit.Position.x;
            unit.Position.y = unit.Position.y;
            unit.PositionRecords = 1;
            units[existing] = unit;
        }
        else
        {
            unit.Position.x = (units.Raw()[existing].Position.x * unit.PositionRecords + unit.Position.x) / (float)(unit.PositionRecords + 1);
            unit.Position.y = (units.Raw()[existing].Position.y * unit.PositionRecords + unit.Position.y) / (float)(unit.PositionRecords + 1);
            unit.PositionRecords++;
            units[existing] = unit;
        }
    }
    else
    {
        unit.Position.x = unit.Position.x;
        unit.Position.y = unit.Position.y;
        units[existing] = unit;
    }
}

void RemoveUnitAt(List<Unit>* units, float2 unit)
{
    u8 isNotDone = true;
    for (int i = 0; isNotDone && i < units.Length(); i++)
    {
        f32 distanceSqr = DistanceSqr(units.Raw()[i].Position, unit);
        if (distanceSqr < DistanceThresholdSq)
        {
            isNotDone = false;
            units.Remove(i);
        }
    }
}

void PerformRadar()
{
    f32 radarDistance = radar();
    if (radarDistance > 0f)
    {
        prevRadarDistance = radarDistance;

        float2 point;
        point.x = Cos(Radar.RadarDirection);
        point.y = Sin(Radar.RadarDirection);
        point.x *= radarDistance;
        point.y *= radarDistance;
        ToGlobal(&point);

        Unit enemy;
        enemy.Recorded = time();
        enemy.Expires = time() + 12f;
        enemy.Position = point;
        enemy.PositionRecords = 1;
        SendVerificationRequest(&enemy);
        UpdateUnit(&enemies, enemy);
    }
    if (radarDistance == 0f)
    {
        prevRadarDistance = 0f;
    }
    Radar.RadarDirection = (Radar.RadarDirection + 0.05f) % TAU;
}

void TrySendVerificationRequest(Unit* unit)
{
    if (unit.VerificationSentAt + 1f < time())
    {
        SendVerificationRequest(unit);
    }
}

void SendVerificationRequest(Unit* unit)
{
    float2 point = unit.Position;

    VerificationRequestPacket packet = new VerificationRequestPacket;
    packet.Header = (u8)REQUEST_HEADER;
    packet.Position = point;

    // ToLocal(&point);
    // float distance = _Sqrt(point.x * point.x + point.y * point.y);
    // Normalise(&point);
    // float angle = Atan2(point.y, point.x);

    // send(&v, sizeof(VerificationRequestPacket), Radar.RadarDirection, Asin(1.2f / radarDistance));
    send(&packet as u8[]*, sizeof(VerificationRequestPacket), 0f, 0f);
    debug(point, BLUE);

    unit.VerificationSentAt = time();
}

struct Unit
{
    float2 Position;
    f32 Recorded;
    f32 Expires;
    f32 VerificationSentAt;
    u8 PositionRecords;
    f32 NotifiedAt;
}

f32 prevRadarDistance = 0f;
List<Unit> enemies = new List<Unit>(4);
List<Unit> allies = new List<Unit>(4);

PrintLine("Started ...");

while (1)
{
    Receive();

    PerformRadar();

    for (int i = (&enemies).Length() - 1; i >= 0; i--)
    {
        if (time() >= (&enemies).Raw()[i].Expires)
        {
            (&enemies).Remove(i);
        }
        else
        {
            float2 p = (&enemies).Raw()[i].Position;
            ToLocal(&p);
            if (time() >= (&enemies).Raw()[i].Recorded + 4f)
            {
                if (time() >= (&enemies).Raw()[i].NotifiedAt + 5f)
                {
                    EnemyNotificationPacket notificationPacket;
                    notificationPacket.Header = ENEMY_HEADER;
                    notificationPacket.Position = (&enemies).Raw()[i].Position;
                    send(&notificationPacket as u8[]*, sizeof(EnemyNotificationPacket), 0f, 0f);
                    (&enemies).Raw()[i].NotifiedAt = time();
                }
                ldebug(p, RED);
            }
            else
            {
                ldebug(p, YELLOW);
            }
            TrySendVerificationRequest(&(&enemies).Raw()[i]);
        }
    }

    for (int i = (&allies).Length() - 1; i >= 0; i--)
    {
        if (time() >= (&allies).Raw()[i].Expires)
        {
            TrySendVerificationRequest(&(&allies).Raw()[i]);
            (&allies).Remove(i);
        }
        else
        {
            float2 p = (&allies).Raw()[i].Position;
            debug(p, GREEN);
        }
    }
}
