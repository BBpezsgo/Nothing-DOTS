using "~/Projects/BBLang/Core/StandardLibrary/Primitives.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Math.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Vectors.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Console.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Memory.bbc";
using "move.bbc";
using "api.bbc";

[UnitCommand(1, "In")]
struct CommandIn
{
    [Context("position")] float2 position;
}

[UnitCommand(2, "Out")]
struct CommandOut
{
    [Context("position")] float2 position;
}

[UnitCommand(3, "Move to")]
struct CommandMoveTo
{
    [Context("position")] float2 position;
}

[UnitCommand(4, "Set Source")]
struct CommandSetSource
{
    [Context("position")] float2 position;
}

[UnitCommand(5, "Set Destination")]
struct CommandSetDestination
{
    [Context("position")] float2 position;
}

const int MaxPacketLength = 9 + 1;
const u8 REQUEST_HEADER = 0b_11110000;
const u8 RESPONSE_HEADER = 0b_01111000;

struct VerificationRequestPacket
{
    byte Header;
    float2 Position;
}

struct VerificationResponsePacket
{
    byte Header;
    float2 Position;
}

const int MaxCommandDataSize = 8;

const f32 PI = 3.14159265359f;
const f32 TAU = PI * 2f;
const u8 true = (u8)1;
const u8 false = (u8)0;
const f32 DistanceThreshold = 2f;
const f32 DistanceThresholdSq = DistanceThreshold * DistanceThreshold;

void Receive()
{
    u8[MaxPacketLength] v;
    f32 direction;

    while (1)
    {
        i32 receivedLength = receive(&v, MaxPacketLength, &direction);
        if (!receivedLength) { break; }

        if (v[0] == (u8)REQUEST_HEADER &&
            receivedLength == sizeof(VerificationRequestPacket))
        {
            VerificationRequestPacket* packet = &v as VerificationRequestPacket*;

            VerificationResponsePacket responsePacket = new VerificationResponsePacket;
            responsePacket.Header = (u8)RESPONSE_HEADER;
            responsePacket.Position = packet.Position;

            if (DistanceSqr(packet.Position, GPS.Position) < DistanceThresholdSq)
            {
                debug(packet.Position, CYAN);

                send(&responsePacket as u8[]*, sizeof(VerificationResponsePacket), direction, 0.1f);
            }
        }
    }
}

float2 currentDestination = new float2;
u8 currentDirectionAtDestination = (u8)0;

float2 _loadSource = new float2;
float2 _loadDestination = new float2;
int _state = 0;

while (1)
{
    Receive();

    byte[MaxCommandDataSize] _command;

    int commandId = dequeue_command(&_command);

    if (commandId == 1)
    {
        CommandIn* command = &_command as CommandIn*;
        currentDirectionAtDestination = (u8)2;
        currentDestination = command.position;
    }
    else if (commandId == 2)
    {
        CommandOut* command = &_command as CommandOut*;
        currentDirectionAtDestination = (u8)1;
        currentDestination = command.position;
    }
    else if (commandId == 3)
    {
        CommandMoveTo* command = &_command as CommandMoveTo*;
        currentDirectionAtDestination = (u8)0;
        currentDestination = command.position;
    }
    else if (commandId == 4)
    {
        CommandSetSource* command = &_command as CommandSetSource*;
        _loadSource = command.position;
    }
    else if (commandId == 5)
    {
        CommandSetDestination* command = &_command as CommandSetDestination*;
        _loadDestination = command.position;
    }

    if (currentDestination.x != 0f &&
        currentDestination.y != 0f)
    {
        float d = DistanceSqr(GPS.Position, currentDestination);
        if (d < 2f * 2f)
        {
            StopMoving();
            Transporter.LoadDirection = currentDirectionAtDestination;
        }
        else
        {
            MoveTo(currentDestination.x, currentDestination.y);
        }
    }
    else if (_loadSource.x != 0f &&
             _loadSource.y != 0f &&
             _loadDestination.x != 0f &&
             _loadDestination.y != 0f)
    {
        if (_state == 0)
        {
            float d = DistanceSqr(GPS.Position, _loadSource);
            if (d < 2f * 2f)
            {
                _state = 1;
            }
            else
            {
                MoveTo(_loadSource.x, _loadSource.y);
            }
        }
        elseif (_state == 1)
        {
            StopMoving();
            Transporter.LoadDirection = (u8)2;
            if (Transporter.CurrentLoad > 10)
            {
                _state = 2;
            }
        }
        elseif (_state == 2)
        {
            float d = DistanceSqr(GPS.Position, _loadDestination);
            if (d < 2f * 2f)
            {
                _state = 3;
            }
            else
            {
                MoveTo(_loadDestination.x, _loadDestination.y);
            }
        }
        elseif (_state == 3)
        {
            StopMoving();
            Transporter.LoadDirection = (u8)1;
            if (Transporter.CurrentLoad <= 0)
            {
                _state = 0;
            }
        }
    }
}
