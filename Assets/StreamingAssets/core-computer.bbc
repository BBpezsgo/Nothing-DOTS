using "lib/api.bbc";
using "lib/protocol.bbc";

[UnitCommand(1, "Attack at")]
struct CommandAttackAt
{
    [Context("position3")] float3 position;
}

const int MaxCommandDataSize = 8;

void Receive()
{
    u8[MaxPacketLength] v;
    float3 direction;

    while (1)
    {
        i32 receivedLength = receive(&v, MaxPacketLength, &direction);
        if (!receivedLength) { break; }

        if (v[0] == (u8)REQUEST_HEADER &&
            receivedLength == sizeof(VerificationRequestPacket))
        {
            VerificationRequestPacket* packet = &v as VerificationRequestPacket*;

            VerificationResponsePacket responsePacket = new VerificationResponsePacket;
            responsePacket.Header = (u8)RESPONSE_HEADER;

            if (DistanceSqr(packet.Position, GPS.Position) < DistanceThresholdLargeSq)
            {
                responsePacket.Position = packet.Position;
                debug(packet.Position, CYAN);
                send(&responsePacket as u8[]*, sizeof(VerificationResponsePacket), &direction, 0.1f);
            }
            else
            {
                for (int i = 0; i < (&allies).Length(); i++)
                {
                    f32 distanceSqr = DistanceSqr((&allies).Raw()[i].Position, packet.Position);
                    if (distanceSqr < DistanceThresholdSq)
                    {
                        IndirectVerificationResponsePacket indirectResponsePacket = new IndirectVerificationResponsePacket;
                        indirectResponsePacket.Header = (u8)INDIRECT_RESPONSE_HEADER;
                        indirectResponsePacket.Position = (&allies).Raw()[i].Position;
                        indirectResponsePacket.Expires = (&allies).Raw()[i].Expires;
                        send(&indirectResponsePacket as u8[]*, sizeof(IndirectVerificationResponsePacket), &direction, 0.1f);
                        return;
                    }
                }
            }
        }
        else if (v[0] == (u8)RESPONSE_HEADER &&
                 receivedLength == sizeof(VerificationResponsePacket))
        {
            VerificationResponsePacket* packet = &v as VerificationResponsePacket*;

            Unit unit;
            unit.Position = packet.Position;
            unit.Recorded = time();
            unit.Expires = time() + 10f;
            unit.VerificationSentAt = time();
            RemoveUnitAt(&enemies, unit.Position);
            UpdateUnit(&allies, unit);
        }
        else if (v[0] == (u8)ENEMY_HEADER &&
                 receivedLength == sizeof(EnemyNotificationPacket))
        {
            EnemyNotificationPacket* packet = &v as EnemyNotificationPacket*;

            Unit unit;
            unit.Position = packet.Position;
            unit.Recorded = 0f;
            unit.Expires = time() + 5f;
            unit.VerificationSentAt = time();
            int j = UpdateUnit(&enemies, unit);

            for (int i = 0; i < (&allies).Length(); i++)
            {
                if (i != j)
                {
                    direction = (&allies).Raw()[i].Position;
                    ToLocal(&direction);
                    Normalise(&direction);

                    PrintLine("NTFY");

                    send(&packet as u8[]*, sizeof(EnemyNotificationPacket), &direction);
                }
            }
        }
        else if (v[0] == (u8)INDIRECT_RESPONSE_HEADER &&
                 receivedLength == sizeof(IndirectVerificationResponsePacket))
        {
            IndirectVerificationResponsePacket* packet = &v as IndirectVerificationResponsePacket*;

            Unit unit;
            unit.Position = packet.Position;
            unit.Recorded = time();
            unit.Expires = packet.Expires;
            unit.VerificationSentAt = time();
            RemoveUnitAt(&enemies, unit.Position);
            UpdateUnit(&allies, unit);
        }
    }
}

List<Unit> enemies = new List<Unit>(4);
List<Unit> allies = new List<Unit>(4);

UIImage _minimap = new UIImage((i16)22, (i16)22);
_minimap.Width = 100;
_minimap.Height = 100;
_minimap.X = 10;
_minimap.Y = 10;
(&_minimap).Update();

const float MinimapScale = 1f;

PrintLine("Started ...");

while (1)
{
    Receive();

    (&_minimap).Fill((u8)0);
    (&_minimap).Set(new float2(11f, 11f), (u8)0b_111_111_11);

    for (int i = (&enemies).Length() - 1; i >= 0; i--)
    {
        Unit* enemy = &(&enemies).Raw()[i];
        if (time() >= enemy.Expires)
        {
            (&enemies).Remove(i);
        }
        else
        {
            TrySendVerificationRequest(enemy);
            float3 p = enemy.Position;
            ToLocal(&p);
            if (time() >= enemy.Recorded + 4f)
            {
                ldebug(p, RED);
                (&_minimap).Set((new float2(p.x, p.z) * (0.5f * MinimapScale) + new float2(11f, 11f)), (u8)((int)(0b_111 * Max(0f, enemy.Expires - time()) / 10f) << 5));
                PrintLine(p.x);
            }
        }
    }

    for (int i = (&allies).Length() - 1; i >= 0; i--)
    {
        Unit* ally = &(&allies).Raw()[i];
        if (time() >= ally.Expires)
        {
            TrySendVerificationRequest(ally);
            (&allies).Remove(i);
        }
        else
        {
            float3 p = ally.Position;
            debug(p, GREEN);
            ToLocal(&p);
            (&_minimap).Set((new float2(p.x, p.z) * (0.5f * MinimapScale) + new float2(11f, 11f)), (u8)((int)(0b_111 * Max(0f, ally.Expires - time()) / 10f) << 2));
        }
    }

    byte[MaxCommandDataSize] _command;

    int commandId = dequeue_command(&_command);

    if (commandId == 1)
    {
        CommandAttackAt* command = &_command as CommandAttackAt*;
        debug(command.position, RED);

        EnemyNotificationPacket notificationPacket;
        notificationPacket.Header = ENEMY_HEADER;
        notificationPacket.Position = command.position;
        send(&notificationPacket as u8[]*, sizeof(EnemyNotificationPacket));
    }

    (&_minimap).Update();
}
