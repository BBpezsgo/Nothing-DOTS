using "~/Projects/BBLang/Core/StandardLibrary/Primitives.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Math.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Vectors.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Console.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Memory.bbc";
using "api.bbc";

[UnitCommand(1, "Attack at")]
struct CommandAttackAt
{
    [Context("position")] Vector2 position;
}

const int MaxPacketLength   = 9 + 1;
const u8 REQUEST_HEADER     = 0b_11110000;
const u8 RESPONSE_HEADER    = 0b_01111000;
const u8 ENEMY_HEADER       = 0b_00111100;

struct VerificationRequestPacket
{
    byte Header;
    Vector2 Position;
}

struct VerificationResponsePacket
{
    byte Header;
    Vector2 Position;
}

struct EnemyNotificationPacket
{
    byte Header;
    Vector2 Position;
}

const int MaxCommandDataSize = 8;

*Mapped = new MappedMemory;

const f32 PI = 3.14159265359f;
const f32 TAU = PI * 2f;
const u8 true = (u8)1;
const u8 false = (u8)0;
const f32 DistanceThreshold = 2f;
const f32 DistanceThresholdSq = DistanceThreshold * DistanceThreshold;

const f32 DistanceThresholdLarge = 5f;
const f32 DistanceThresholdLargeSq = DistanceThresholdLarge * DistanceThresholdLarge;

void Receive()
{
    u8[MaxPacketLength] v;
    f32 direction;

    while (1)
    {
        i32 receivedLength = receive(&v, MaxPacketLength, &direction);
        if (!receivedLength) { break; }

        if (v[0] == (u8)REQUEST_HEADER &&
            receivedLength == sizeof(VerificationRequestPacket))
        {
            VerificationRequestPacket* packet = &v as VerificationRequestPacket*;

            VerificationResponsePacket responsePacket = new VerificationResponsePacket;
            responsePacket.Header = (u8)RESPONSE_HEADER;

            if (DistanceSqr(packet.Position, Mapped.Position) < DistanceThresholdLargeSq)
            {
                responsePacket.Position = packet.Position;
                debug(packet.Position, CYAN);
                send(&responsePacket as u8[]*, sizeof(VerificationResponsePacket), direction, 0.1f);
            }
        }
    }
}

while (1)
{
    Receive();

    byte[MaxCommandDataSize] _command;

    int commandId = dequeue_command(&_command);

    if (commandId == 1)
    {
        CommandAttackAt* command = &_command as CommandAttackAt*;
        debug(command.position, RED);

        EnemyNotificationPacket notificationPacket;
        notificationPacket.Header = ENEMY_HEADER;
        notificationPacket.Position = command.position;
        send(&notificationPacket as u8[]*, sizeof(EnemyNotificationPacket), 0f, 0f);
    }
}
