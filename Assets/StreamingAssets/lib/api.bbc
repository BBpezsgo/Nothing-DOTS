using "~/Projects/BBLang/Core/StandardLibrary/System.bbc";
using "mm.bbc";
using "utils.bbc";

export void Print(float2 v)
{
    Print(v.x);
    Print(' ');
    Print(v.y);
}

export inline void PrintLine(float2 v)
{
    Print(v);
    PrintLine();
}

export void Print(float3 v)
{
    Print(v.x);
    Print(' ');
    Print(v.y);
    Print(' ');
    Print(v.z);
}

export inline void PrintLine(float3 v)
{
    Print(v);
    PrintLine();
}

export void sleep(f32 sec)
{
    f32 at = time() + sec;
    while (time() < at) { }
}

export const u8 BLUE = (u8)0b001;
export const u8 GREEN = (u8)0b010;
export const u8 CYAN = (u8)0b011;
export const u8 RED = (u8)0b100;
export const u8 MAGENTA = (u8)0b101;
export const u8 YELLOW = (u8)0b110;
export const u8 WHITE = (u8)0b111;

[External("atan2")] export f32 Atan2(f32 y, f32 x);
[External("tan")] export f32 Tan(f32 v);
[External("asin")] export f32 Asin(f32 v);
[External("acos")] export f32 Acos(f32 v);
[External("atan")] export f32 Atan(f32 v);
[External("random")] export i32 _Random();

[External("send")] export void send(any* buffer, i32 length, float3* direction, f32 angle);

export inline void send(any* buffer, i32 length, float3 direction, f32 angle)
{
    send(buffer, length, &direction, angle);
}

export inline void send(any* buffer, i32 length, float3* direction)
{
    send(buffer, length, direction, 0.1f);
}

export inline void send(any* buffer, i32 length, float3 direction)
{
    send(buffer, length, &direction, 0.1f);
}

export inline void send(any* buffer, i32 length)
{
    send(buffer, length, (float3*)0, 0f);
}

[External("receive")] export i32 receive(any* buffer, i32 length, float3* direction);
[External("radar")] void _radar();

export float3 radar()
{
    Radar.RadarResponse.x = 0f;
    Radar.RadarResponse.y = 0f;
    Radar.RadarResponse.z = 0f;

    _radar();

    while (empty(Radar.RadarResponse))
    {

    }

    if (IsNaN(Radar.RadarResponse.x) || IsNaN(Radar.RadarResponse.y) || IsNaN(Radar.RadarResponse.z))
    {
        return new float3;
    }

    return Radar.RadarResponse;
}

export void ToGlobal(byte3* point)
{
    float3 p;
    ToFloat3(point, &p);
    ToGlobal(&p);
    ToByte3(&p, point);
}

export void ToGlobal(byte2* point)
{
    float2 p;
    ToFloat2(point, &p);
    ToGlobal(&p);
    ToByte2(&p, point);
}

[External("toglobal")] export void ToGlobal(float3* point);
[External("tolocal")] export void ToLocal(float3* point);

[External("toglobald")] export void ToGlobalD(float3* direction);
[External("tolocald")] export void ToLocalD(float3* direction);

export float3 ToLocal(float3 point)
{
    ToLocal(&point);
    return point;
}

export float3 ToGlobal(float3 point)
{
    ToGlobal(&point);
    return point;
}

export float3 ToLocalD(float3 direction)
{
    ToLocalD(&direction);
    return direction;
}

export float3 ToGlobalD(float3 direction)
{
    ToGlobalD(&direction);
    return direction;
}

export void ToGlobal(float2* point)
{
    float3 _p = new float3(point.x, 0f, point.y);
    ToGlobal(&_p);
    *point = new float2(_p.x, _p.z);
}

export void ToLocal(float2* point)
{
    float3 _p = new float3(point.x, 0f, point.y);
    ToLocal(&_p);
    *point = new float2(_p.x, _p.z);
}

[External("time")] export f32 time();

[External("debug")] export void debug(float3 position, u8 color);
[External("ldebug")] export void ldebug(float3 localPosition, u8 color);

export inline void debug(float2 position, u8 color)
{
    debug(new float3(position.x, 0f, position.y), color);
}

export inline void ldebug(float2 localPosition, u8 color)
{
    ldebug(new float3(localPosition.x, 0f, localPosition.y), color);
}

[External("debug_label")] export void debug_label(float3 position, string text);
[External("ldebug_label")] export void ldebug_label(float3 localPosition, string text);

export inline void debug_label(float2 position, string text)
{
    debug_label(new float3(position.x, 0f, position.y), text);
}

export inline void ldebug_label(float2 localPosition, string text)
{
    ldebug_label(new float3(localPosition.x, 0f, localPosition.y), text);
}

[External("dequeue_command")] export int dequeue_command(any* data);

[External("gui_create")] void gui_create(any* ptr);
[External("gui_update")] void gui_update(any* ptr);
[External("gui_destroy")] void gui_destroy(int id);

export u8 ColorTo255(float r, float g, float b)
{
    return (u8)(
        ((u8)(r * 7) << 5) |
        ((u8)(g * 7) << 2) |
        ((u8)(b * 3))
    );
}

export u8 ColorTo255(int r, int g, int b)
{
    return (u8)(
        ((u8)(r * 7 / 255) << 5) |
        ((u8)(g * 7 / 255) << 2) |
        ((u8)(b * 3 / 255))
    );
}

export struct UILabel
{
    private bool _dirty;
    private int _id;
    private byte _type;
    int X;
    int Y;
    int Width;
    int Height;
    float3 Color;
    char[15] Text;

    export UILabel()
    {
        this._type = 1;
        this.X = 50;
        this.Y = 50;
        this.Width = 50;
        this.Height = 50;
        this.Text = "Hey";
        gui_create(&this);
    }

    export inline void Destroy()
    {
        gui_destroy(this._id);
    }

    export inline void Update()
    {
        gui_update(&this);
    }
}

export struct UIImage
{
    private bool _dirty;
    private int _id;
    private byte _type;
    int X;
    int Y;
    int Width;
    int Height;
    i16 ImageWidth;
    i16 ImageHeight;
    byte[510] Image;

    export UIImage(i16 width, i16 height)
    {
        this._type = 2;
        this.X = 50;
        this.Y = 50;
        this.Width = 50;
        this.Height = 50;
        this.ImageWidth = width;
        this.ImageHeight = height;
        // for (int y = 0; y < height; y++)
        // {
        //     for (int x = 0; x < width; x++)
        //     {
        //         this.Image[x + (y * width)] = (u8)(x + (y * width));
        //     }
        // }
        gui_create(this);
    }

    export inline void Destroy()
    {
        gui_destroy(this._id);
    }

    export void Set(int x, int y, int r, int g, int b)
    {
        if (x < 0) x = 0;
        else if (x >= this.ImageWidth) x = (int)this.ImageWidth;
        if (y < 0) y = 0;
        else if (y >= this.ImageHeight) y = (int)this.ImageHeight;
        this.Image[y * this.ImageWidth + x] = ColorTo255(r, g, b);
    }

    export void Fill(int r, int g, int b)
    {
        Fill(ColorTo255(r, g, b));
    }

    export void Set(int x, int y, u8 color)
    {
        if (x < 0) x = 0;
        else if (x >= this.ImageWidth) x = (int)this.ImageWidth;
        if (y < 0) y = 0;
        else if (y >= this.ImageHeight) y = (int)this.ImageHeight;
        this.Image[y * this.ImageWidth + x] = color;
    }

    export void Fill(u8 color)
    {
        int l = (int)this.ImageWidth * (int)this.ImageHeight;
        for (int i = 0; i < l; i++)
        {
            this.Image[i] = color;
        }
    }

    export inline void Update()
    {
        gui_update(this);
    }

    // export inline void Set(int2 pos, int r, int g, int b)   { this.Set(pos.x, pos.y, r, g, b); }
    // export inline void Set(int2 pos, u8 color)              { this.Set(pos.x, pos.y, color); }

    export inline void Set(float2 pos, int r, int g, int b) { this.Set((int)pos.x, (int)pos.y, r, g, b); }
    export inline void Set(float2 pos, u8 color)            { this.Set((int)pos.x, (int)pos.y, color); }
}

[External("pendrive_plug")]
export void _pendrive_plug();

[External("pendrive_unplug")]
export void _pendrive_unplug();

[External("pendrive_read")]
export int _pendrive_read(int source, byte[]* destination, int length);

[External("pendrive_write")]
export int _pendrive_write(byte[]* source, int destination, int length);

export void _facility_enqueue(TechnologyHash* hash)
{
    Facility.HashLocation = hash;
    Facility.Signal = (u8)1;
    while (Facility.Signal == (u8)1)
    {

    }
}

export u8 _facility_dequeue(TechnologyHash* hash)
{
    Facility.HashLocation = hash;
    Facility.Signal = (u8)2;
    while (Facility.Signal == (u8)2)
    {

    }
    return Facility.Signal == (u8)3;
}
