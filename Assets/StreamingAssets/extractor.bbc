using "~/Projects/BBLang/Core/StandardLibrary/Primitives.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Math.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Vectors.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Console.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Memory.bbc";
using "move.bbc";
using "api.bbc";

[UnitCommand(1, "Extract")]
struct CommandExtract
{
    [Context("position")] Vector2 position;
}

[UnitCommand(2, "Move to")]
struct CommandMoveTo
{
    [Context("position")] Vector2 position;
}

const int MaxPacketLength = 9 + 1;
const u8 REQUEST_HEADER = 0b_11110000;
const u8 RESPONSE_HEADER = 0b_01111000;

struct VerificationRequestPacket
{
    byte Header;
    Vector2 Position;
}

struct VerificationResponsePacket
{
    byte Header;
    Vector2 Position;
}

const int MaxCommandDataSize = 8;

const f32 PI = 3.14159265359f;
const f32 TAU = PI * 2f;
const u8 true = (u8)1;
const u8 false = (u8)0;
const f32 DistanceThreshold = 2f;
const f32 DistanceThresholdSq = DistanceThreshold * DistanceThreshold;

void Receive()
{
    u8[MaxPacketLength] v;
    f32 direction;

    while (1)
    {
        i32 receivedLength = receive(&v, MaxPacketLength, &direction);
        if (!receivedLength) { break; }

        if (v[0] == (u8)REQUEST_HEADER &&
            receivedLength == sizeof(VerificationRequestPacket))
        {
            VerificationRequestPacket* packet = &v as VerificationRequestPacket*;

            VerificationResponsePacket responsePacket = new VerificationResponsePacket;
            responsePacket.Header = (u8)RESPONSE_HEADER;
            responsePacket.Position = packet.Position;

            if (DistanceSqr(packet.Position, GPS.Position) < DistanceThresholdSq)
            {
                debug(packet.Position, CYAN);

                send(&responsePacket as u8[]*, sizeof(VerificationResponsePacket), direction, 0.1f);
            }
        }
    }
}

Vector2 currentDestination = new Vector2;
Vector2 currentExtract = new Vector2;

while (1)
{
    Receive();

    byte[MaxCommandDataSize] _command;

    int commandId = dequeue_command(&_command);

    if (commandId == 1)
    {
        CommandExtract* command = &_command as CommandExtract*;
        currentExtract = command.position;
        currentDestination = new Vector2;
    }
    else if (commandId == 2)
    {
        CommandMoveTo* command = &_command as CommandMoveTo*;
        currentExtract = new Vector2;
        currentDestination = command.position;
    }

    if (currentDestination.x != 0f &&
        currentDestination.y != 0f)
    {
        MoveTo(currentDestination.x, currentDestination.y);
    }

    if (currentExtract.x != 0f &&
        currentExtract.y != 0f)
    {
        float d = DistanceSqr(GPS.Position, currentExtract);
        if (d < 2f * 2f)
        {
            StopMoving();
            debug(currentExtract, WHITE);

            CombatTurret.InputShoot = (u8)1;
        }
        else
        {
            MoveTo(currentExtract.x, currentExtract.y);
        }
    }
}
