using "~/Projects/BBLang/Core/StandardLibrary/Primitives.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Vectors.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Console.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Math.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Memory.bbc";

const int MappedMemoryStart = 640;

struct MappedMemory_Vehicle
{
    i8 InputForward;
    i8 InputSteer;
}
export const MappedMemory_Vehicle* Vehicle = MappedMemoryStart + 0;
*Vehicle = new MappedMemory_Vehicle;

struct MappedMemory_CombatTurret
{
    u8 InputShoot;
    f32 TurretTargetRotation;
    f32 TurretTargetAngle;
    f32 TurretCurrentRotation;
    f32 TurretCurrentAngle;
}
export const MappedMemory_CombatTurret* CombatTurret = MappedMemoryStart + 2;
*CombatTurret = new MappedMemory_CombatTurret;

struct MappedMemory_Extractor
{
    u8 InputExtract;
}
export const MappedMemory_Extractor* Extractor = MappedMemoryStart + 2;
*Extractor = new MappedMemory_Extractor;

struct MappedMemory_Transporter
{
    u8 LoadDirection;
    i32 CurrentLoad;
}
export const MappedMemory_Transporter* Transporter = MappedMemoryStart + 2;
*Transporter = new MappedMemory_Transporter;

struct MappedMemory_Radar
{
    f32 RadarDirection;
    f32 RadarResponse;
}
export const MappedMemory_Radar* Radar = MappedMemoryStart + 19;
*Radar = new MappedMemory_Radar;

struct MappedMemory_GPS
{
    Vector2 Position;
    Vector2 Forward;
}
export const MappedMemory_GPS* GPS = MappedMemoryStart + 27;
*GPS = new MappedMemory_GPS;

export void Print(Vector2 v)
{
    Print(v.x);
    Print(' ');
    Print(v.y);
}

export inline void PrintLine(Vector2 v)
{
    Print(v);
    PrintLine();
}

export void sleep(f32 sec)
{
    f32 at = time() + sec;
    while (time() < at) { }
}

export const u8 BLUE = (u8)0b001;
export const u8 GREEN = (u8)0b010;
export const u8 CYAN = (u8)0b011;
export const u8 RED = (u8)0b100;
export const u8 MAGENTA = (u8)0b101;
export const u8 YELLOW = (u8)0b110;
export const u8 WHITE = (u8)0b111;

[External("atan2")] export f32 Atan2(f32 x, f32 y);
[External("sin")] export f32 Sin(f32 v);
[External("cos")] export f32 Cos(f32 v);
[External("tan")] export f32 Tan(f32 v);
[External("asin")] export f32 Asin(f32 v);
[External("acos")] export f32 Acos(f32 v);
[External("atan")] export f32 Atan(f32 v);
[External("sqrt")] export f32 _Sqrt(f32 v);
[External("random")] export i32 _Random();

[External("send")] export void send(any* buffer, i32 length, f32 direction, f32 angle);
[External("receive")] export i32 receive(any* buffer, i32 length, f32* direction);
[External("radar")] void _radar();

export f32 radar()
{
    Radar.RadarResponse = 0f;
    _radar();
    while (!(Radar.RadarResponse as int))
    {

    }
    if (Radar.RadarResponse.IsNaN())
    {
        Radar.RadarResponse = 0f;
    }
    return Radar.RadarResponse;
}

export void ToGlobal(byte2* point)
{
    Vector2 p;
    ToFloat2(point, &p);
    ToGlobal(&p);
    ToByte2(&p, point);
}

[External("toglobal")] export void ToGlobal(Vector2* point);
[External("tolocal")] export void ToLocal(Vector2* point);
[External("time")] export f32 time();

[External("debug")] export void debug(Vector2 position, u8 color);
[External("ldebug")] export void ldebug(Vector2 localPosition, u8 color);

[External("dequeue_command")] export int dequeue_command(any* data);

// export f32 Atan2(f32 x, f32 y) { return 0f; }
// export f32 Sin(f32 v) { return 0f; }
// export f32 Cos(f32 v) { return 0f; }
// export f32 Tan(f32 v) { return 0f; }
// export f32 Asin(f32 v) { return 0f; }
// export f32 Acos(f32 v) { return 0f; }
// export f32 Atan(f32 v) { return 0f; }
// export f32 _Sqrt(f32 v) { return 0f; }
// export i32 _Random() { return 0; }
// 
// export void send(any* buffer, i32 length, f32 direction, f32 angle) { }
// export i32 receive(any* buffer, i32 length, f32* direction) { return 0; }
// export f32 radar(i32* metadata) { return 0f; }
// 
// export void ToGlobal(Vector2* point) { }
// export void ToLocal(Vector2* point) { }
// export f32 time() { return 0f; }
// 
// export void debug(Vector2 position, i32 color) { }
// export void ldebug(Vector2 localPosition, i32 color) { }
