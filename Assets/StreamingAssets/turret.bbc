using "~/Projects/BBLang/Core/StandardLibrary/Primitives.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Math.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Vectors.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Console.bbc";
using "~/Projects/BBLang/Core/StandardLibrary/System.Memory.bbc";
using "api.bbc";

const f32 PI = 3.14159265359f;
const f32 TAU = PI * 2f;
const f32 G = 9.82f;
const f32 PROJECTILE_V = 20f ;
const f32 PROJECTILE_V2 = PROJECTILE_V * PROJECTILE_V;

export u8 TargetAt(Vector2 target, Vector2* targetedPosition)
{
    if (target.x == 0f &&
        target.y == 0f)
    {
        return (u8)0;
    }

    if (targetedPosition.x != target.x ||
        targetedPosition.y != target.y)
    {
        *targetedPosition = target;
        target.y -= 0.2f;

        {
            Vector2 targetDirection = Normalised(target);
            f32 targetAngle = Atan2(targetDirection.x, targetDirection.y);
            if (targetAngle < 0f) { targetAngle += TAU; }
            if (targetAngle >= TAU) { targetAngle -= TAU; }
            CombatTurret.TurretTargetRotation = targetAngle;
        }

        f32 targetDistance = Magnitude(target);
        targetDistance -= Cos(CombatTurret.TurretCurrentAngle) * 2.5f;
        f32 height = Sin(CombatTurret.TurretCurrentAngle) * 2.5f;
        f32 discriminant = (
            (PROJECTILE_V2 * PROJECTILE_V2) -
            (G * (G * targetDistance * targetDistance + ((10f + height) * -2f * PROJECTILE_V2)))
        );
        if (discriminant < 0f)
        {

        }
        else if (1)
        {
            CombatTurret.TurretTargetAngle = Atan(
                (PROJECTILE_V2 + _Sqrt(discriminant)) /
                (G * targetDistance)
            ) - (PI * 0.5f);
        }
        else
        {
            CombatTurret.TurretTargetAngle = Atan(
                (PROJECTILE_V2 - _Sqrt(discriminant)) /
                (G * targetDistance)
            ) - (PI * 0.5f);
        }
    }

    f32 diff = Abs(CombatTurret.TurretCurrentRotation - CombatTurret.TurretTargetRotation);

    if (diff < 0.1f || TAU - diff < 0.1f)
    {
        return (u8)1;
    }

    return (u8)0;
}

export u8 TargetAtSimple(Vector2 target, Vector2* targetedPosition)
{
    if (target.x == 0f &&
        target.y == 0f)
    {
        return (u8)0;
    }

    if (targetedPosition.x != target.x ||
        targetedPosition.y != target.y)
    {
        *targetedPosition = target;
        target.y -= 0.2f;

        {
            Vector2 targetDirection = Normalised(target);
            f32 targetAngle = Atan2(targetDirection.x, targetDirection.y);
            if (targetAngle < 0f) { targetAngle += TAU; }
            if (targetAngle >= TAU) { targetAngle -= TAU; }
            CombatTurret.TurretTargetRotation = targetAngle;
        }

        CombatTurret.TurretTargetAngle = 0.00001f; // TODO: fix this
    }

    f32 diff = Abs(CombatTurret.TurretCurrentRotation - CombatTurret.TurretTargetRotation);

    if (diff < 0.1f || TAU - diff < 0.1f)
    {
        return (u8)1;
    }

    return (u8)0;
}

export void ShootAt(Vector2 target, Vector2* targetedPosition)
{
    CombatTurret.InputShoot = TargetAt(target, targetedPosition);
}

export void ShootAtSimple(Vector2 target, Vector2* targetedPosition)
{
    CombatTurret.InputShoot = TargetAtSimple(target, targetedPosition);
}
