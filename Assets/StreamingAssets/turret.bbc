using "api.bbc";

const f32 G = 9.82f;
const f32 PROJECTILE_V = 20f ;
const f32 PROJECTILE_V2 = PROJECTILE_V * PROJECTILE_V;
const f32 HEIGHT_OFFSET = 0f;

f32 CalculateAngle(f32 targetDistance)
{
    float a = (G * targetDistance) / PROJECTILE_V2;
    if (a < -1f || a > 1f)
    {
        return -0.785398f;
    }
    else
    {
        return -0.5f * Asin(a);
    }
}

f32 CalculateAngle(f32 targetDistance, f32 height)
{
    f32 discriminant = (
        (PROJECTILE_V2 * PROJECTILE_V2) -
        (G * (G * targetDistance * targetDistance + ((HEIGHT_OFFSET + height) * 2f * PROJECTILE_V2)))
    );

    if (discriminant < 0f)
    {
        return -0.785398f;
    }
    else if (1)
    {
        return Atan(
            (PROJECTILE_V2 + _Sqrt(discriminant)) /
            (G * targetDistance)
        ) - (PI * 0.5f);
    }
    else
    {
        return Atan(
            (PROJECTILE_V2 - _Sqrt(discriminant)) /
            (G * targetDistance)
        ) - (PI * 0.5f);
    }
}

f32 CalculateRotation(float2 target)
{
    float2 targetDirection = Normalised(target);
    f32 targetAngle = Atan2(targetDirection.x, targetDirection.y);
    if (targetAngle < 0f) { targetAngle += TAU; }
    if (targetAngle >= TAU) { targetAngle -= TAU; }
    return targetAngle;
}

export u8 TargetAt(float2 target, float2* targetedPosition)
{
    if (target.x == 0f &&
        target.y == 0f)
    {
        return (u8)0;
    }

    if (targetedPosition.x != target.x ||
        targetedPosition.y != target.y)
    {
        *targetedPosition = target;
        target.y -= 0.2f;

        CombatTurret.TurretTargetRotation = CalculateRotation(target);

        f32 targetDistance = Magnitude(target);
        targetDistance -= Cos(CombatTurret.TurretCurrentAngle) * 2.5f;
        // f32 height = Sin(CombatTurret.TurretCurrentAngle) * 2.5f;

        CombatTurret.TurretTargetAngle = CalculateAngle(targetDistance);
    }

    f32 diff1 = Abs(CombatTurret.TurretCurrentRotation - CombatTurret.TurretTargetRotation);
    f32 diff2 = Abs(CombatTurret.TurretCurrentAngle - CombatTurret.TurretTargetAngle);

    if ((diff1 < 0.1f || TAU - diff1 < 0.1f) && (diff2 < 0.01f || TAU - diff2 < 0.01f))
    {
        return (u8)1;
    }

    return (u8)0;
}

export u8 TargetAtSimple(float2 target, float2* targetedPosition)
{
    if (target.x == 0f &&
        target.y == 0f)
    {
        return (u8)0;
    }

    if (targetedPosition.x != target.x ||
        targetedPosition.y != target.y)
    {
        *targetedPosition = target;
        target.y -= 0.2f;

        CombatTurret.TurretTargetRotation = CalculateRotation(target);

        CombatTurret.TurretTargetAngle = 0.00001f; // TODO: fix this
    }

    f32 diff = Abs(CombatTurret.TurretCurrentRotation - CombatTurret.TurretTargetRotation);

    if (diff < 0.1f || TAU - diff < 0.1f)
    {
        return (u8)1;
    }

    return (u8)0;
}

export void ShootAt(float2 target, float2* targetedPosition)
{
    CombatTurret.InputShoot = TargetAt(target, targetedPosition);
}

export void ShootAtSimple(float2 target, float2* targetedPosition)
{
    CombatTurret.InputShoot = TargetAtSimple(target, targetedPosition);
}
