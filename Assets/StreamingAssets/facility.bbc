using api;

char[32] hashPtr = new char[32];

[UnitCommand(1, "Extract From USB")]
struct ExtractUSB
{
    [Context("position")] float2 position;
}

[UnitCommand(2, "Save To USB")]
struct SaveUSB
{
    [Context("position")] float2 position;
}

const int MaxCommandDataSize = 8;

while (1)
{
    byte[MaxCommandDataSize] _command;

    int commandId = dequeue_command(&_command);

    if (Facility.Status == 0)
    {
        if (commandId == 1)
        {
            PrintLine("Plugging pendrive ...");
            while (!Pendrive.IsPlugged)
            {
                _pendrive_plug();
            }
            PrintLine("Plugged");

            _pendrive_read(0, &hashPtr, 32);
            PrintLine("Hash readed");

            PrintLine("Unplugging pendrive ...");
            while (Pendrive.IsPlugged)
            {
                _pendrive_unplug();
            }
            PrintLine("Unplugged");

            PrintLine("Researching technology");
            _facility_enqueue(&hashPtr);
        }
        else if (commandId == 2)
        {
            PrintLine("Plugging pendrive ...");
            while (!Pendrive.IsPlugged)
            {
                _pendrive_plug();
            }
            PrintLine("Plugged");

            if (_facility_dequeue(&hashPtr))
            {
                PrintLine("Hash writed");
                _pendrive_write(&hashPtr, 0, 32);
            }
            else
            {
                PrintLine("No technology avaliable");
            }

            PrintLine("Unplugging pendrive ...");
            while (Pendrive.IsPlugged)
            {
                _pendrive_unplug();
            }
            PrintLine("Unplugged");
        }
    }
}
