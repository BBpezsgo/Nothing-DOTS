using "lib/turret.bbc";
using "lib/move.bbc";
using "lib/api.bbc";
using "lib/protocol.bbc";

[UnitCommand(1, "Build at")]
struct CommandBuildAt
{
    [Context("position3")] float3 position;
}

[UnitCommand(2, "Move to")]
struct CommandMoveTo
{
    [Context("position3")] float3 position;
}

const int MaxCommandDataSize = 8;

void Receive()
{
    u8[MaxPacketLength] v;
    float3 direction;

    while (1)
    {
        i32 receivedLength = receive(&v, MaxPacketLength, &direction);
        if (!receivedLength) { break; }

        if (v[0] == (u8)REQUEST_HEADER &&
            receivedLength == sizeof(VerificationRequestPacket))
        {
            VerificationRequestPacket* packet = &v as VerificationRequestPacket*;

            VerificationResponsePacket responsePacket = new VerificationResponsePacket;
            responsePacket.Header = (u8)RESPONSE_HEADER;
            responsePacket.Position = packet.Position;

            if (DistanceSqr(packet.Position, GPS.Position) < DistanceThresholdSq)
            {
                debug(packet.Position, CYAN);

                send(&responsePacket as u8[]*, sizeof(VerificationResponsePacket), &direction, 0.1f);
            }
        }
    }
}

float3 currentDestination = new float3;
float3 currentBuildAt = new float3;
float3 targetedPosition = new float3;
f32 turretLastUseTime = 0f;

while (1)
{
    Receive();

    byte[MaxCommandDataSize] _command;

    int commandId = dequeue_command(&_command);

    if (commandId == 1)
    {
        CommandMoveTo* command = &_command as CommandMoveTo*;
        currentBuildAt = command.position;
        currentDestination = new float3;
    }
    else if (commandId == 2)
    {
        CommandMoveTo* command = &_command as CommandMoveTo*;
        currentBuildAt = new float3;
        currentDestination = command.position;
    }

    if (currentDestination.x != 0f &&
        currentDestination.z != 0f)
    {
        MoveTo(currentDestination.x, currentDestination.z);
    }

    if (currentBuildAt.x != 0f &&
        currentBuildAt.z != 0f)
    {
        turretLastUseTime = time();
        float d = DistanceSqr(GPS.Position, currentBuildAt);
        if (d < 3f * 3f)
        {
            StopMoving();

            ShootAtSimple(currentBuildAt, &targetedPosition);
            debug(currentBuildAt, WHITE);
        }
        else
        {
            MoveTo(currentBuildAt.x, currentBuildAt.z);
        }
    }
    else if (time() - turretLastUseTime > 5f)
    {
        CombatTurret.TurretTargetRotation = 0f;
        CombatTurret.TurretTargetAngle = 0f;
    }
}
